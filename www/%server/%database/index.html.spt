"""/server/database/
"""
import math

import pymongo
import mongs
from mongs import commaize


MB = 1024 ** 2.0


def f2s(n, scale=1.0):
    """Given float, return str.
    """
    if n == 0.0:
        out = "0&nbsp;&nbsp;"
    else:
        out = commaize(n / scale)
    return out


class Collection(object):
    """Model a MongoDB collection.
    """

    is_index = False

    def __init__(self, db, collname):
        self.name = collname
        self.stats = stats = db.command({'collStats': collname})
        self.storage_size = float(stats['storageSize'])
        self.data_size = float(stats['size'])
        self.indexes = [
            Index(name=key, size=value)
            for key, value in stats.get('indexSizes', {}).items()
        ]

    @property
    def index_size(self):
        return sum(index.storage_size for index in self.indexes)

    def format_storage_size(self, dbsize):
        total = f2s(dbsize, MB).replace("&nbsp;", "N")

        absolute = f2s(self.storage_size, MB)
        absolute = absolute.replace("&nbsp;", "N")
        absolute = ("&nbsp;" * (len(total) - len(absolute))) + absolute
        absolute = absolute.replace("N", "&nbsp;")
        absolute = "%s&nbsp;&nbsp;" % absolute

        percent = f2s(self.storage_size / dbsize * 100)
        percent = ((6 - len(percent)) * "&nbsp;") + percent

        return absolute + percent

    def format_data_size(self, dbsize):
        """Return a string indicating dataSize.
        """
        out = f2s(self.data_size / dbsize * 100)
        out = out.replace("&nbsp;", "N")
        out = ("&nbsp;" * (4 - len(out))) + out
        out = out.replace("N", "&nbsp;")
        return out


class Index(Collection):
    is_index = True

    def __init__(self, name, size):
        self.name = name
        self.storage_size = size
        self.data_size = size


# ==========================================================================
# dodge weird 2.6 issue
[----]


# parse and hydrate
# =================

server = request.path['server']
database = request.path['database']
db = mongs.connect(server)[database]


# dbsize
# ======
# We need the disk size of the database as a whole in order to calculate
# percentages. However, the dbstats call blocks the whole db server while it
# runs, and it takes a long time (we killed it after 15 minutes in the case
# where this problem came to light. Oops!). See:
#
#   http://www.mongodb.org/display/DOCS/Monitoring+and+Diagnostics#MonitoringandDiagnostics-mongoShellDiagnosticCommands
#
# Now instead we sum storageSize from collstats, which is a safe call (per
# jaraco). Apparently there are three size metrics, however, and I'm not sure
# that summing collstats.storageSize is guaranteed to equal dbstats.fileSize
# (which is what I want). Here's me trying to figure out what to do:
#
#   http://stackoverflow.com/questions/10339852/
#
# The bottom line for now is that I'm showing storageSize and dataSize and
# pretending not to care about fileSize (though of course that's the very thing
# I care about!).
#
# Update: I've filed an issue with 10gen to see about safely exposing fileSize
# per-db and per-collection in a future release.

dbsize = 0.0


# rows
# ====
# We have to build this as a list rather than using a generator because we need
# to fully compute dbsize before formatting any given row for display. We also
# take pains to sort by storage_size, with indices grouped by collection.

rows = []
collnames = db.collection_names()

# first build a list of collections, sorted by storage_size ascending
for collname in collnames:
    rows.append(Collection(db, collname))
    dbsize += rows[-1].storage_size
rows.sort(key=lambda row: row.storage_size)

# now add in indices, reversing in the process (we want biggest first)
_rows = []
while rows:
    collection = rows.pop()  # this has the effect of reversing rows
    _rows.append(collection)
    _rows.extend(collection.indexes)
    dbsize += collection.index_size
rows = _rows


# ==========================================================================
# dodge weird 2.6 issue
[----]
{% extends "base.html" %}
{% block content %}
<style>
    TR.collection TD.notfirst {
        border-top: none ! important;
        padding-top: 0 ! important;
    }
    TR.collection TD {
        padding-bottom: 0 ! important;
    }
    TD.name {
        width: 1px;
        padding-left: 10px ! important;
        padding-right: 1em ! important;
    }
    TR.server TD.storage_size,
    TR.database TD.storage_size,
    TR.server TD.data_size,
    TR.database TD.data_size {
        text-align: center;
    }
    TD.storage_size {
        padding-left: 0;
    }
    TD.storage_size, TD.data_size {
        width: 1px;
        font: normal 10pt/12pt "Lucida Mono", Monaco, monospace;
        text-align: right;
        white-space: nowrap;
        font-weight: normal ! important;
    }
    TD.data_size {
        padding-left: 3em ! important;
        padding-right: 3em ! important;
        text-align: center;
    }
    TD.empty {
        width: 100%;
    }
    .index {
        color: #CCC;
    }
</style>
<table>
    <tr class="big server">
        <th><a href="/" title="Click for All Servers">Server</a></th>
        <td class="name">{{ server }}</td>
        {% if rows %}
        <td class="storage_size">storageSize</td>
        <td class="data_size">dataSize</td>
        <td class="empty"></td>
        {% endif %}
    </tr>
    <tr class="big database">
        <th><a href="/{{ server }}/" title="Click for All Databases">Database</a></th>
        <td class="name">{{ database }}</td>
        {% if rows %}
        <td class="storage_size">{{ f2s(dbsize, MB) }} MB&nbsp;&nbsp;%&nbsp;&nbsp;</td>
        <td class="data_size">%</td>
        <td class="empty"></td>
        {% endif %}
    </tr>
    {% if not rows %}
    <tr class="big collection listing">
        <th><span>Collections</span></th>
        <td style="color: #999;">No collections found.</td>
    </tr>
    {% endif %}
    {% for row in rows %}
    <tr class="big collection listing{% if row.is_index %} index{% endif %}">
        {% if loop.index0 == 0 %}<th rowspan="{{ rows|length }}">
            <span>
                Collections
                <span class="note">
                    and indices<br />
                    <br />
                    All percentages use<br />
                    total storageSize<br />
                    as the base</span>
            </span>
        </th>{% endif %}

        <td class="name{% if loop.index0 > 0 %} notfirst{% endif %}">{% if not row.is_index %}<a
            href="/{{ server }}/{{ database }}/{{ row.name }}/">{% endif %}{{ row.name }}{% if not row.is_index %}</
            a>{% endif %}</td>
        <td class="storage_size{% if loop.index0 > 0 %} notfirst{% endif %}">{{ row.format_storage_size(dbsize) }}</td>
        <td class="data_size{% if loop.index0 > 0 %} notfirst{% endif %}">{{ row.format_data_size(dbsize) }}</td>
        <td class="empty{% if loop.index0 > 0 %} notfirst{% endif %}"></td>
    </tr>
    {% endfor %}
</table>
{% endblock %}
